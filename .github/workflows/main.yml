name: Test & Build

on:
  push:
    branches:
      - stable
      - develop
      - main
    tags:
      - v*
  pull_request:
    branches:
      - stable
      - develop
      - main

jobs:

  checks:
    name: Checks
    runs-on: ubuntu-latest
    container: fedorapython/fedora-python-tox:latest
    steps:
      - uses: actions/checkout@v5

      - name: Install dependencies
        run: |
          dnf install -y pre-commit git libpq-devel krb5-devel
          pip install poetry

      - name: Mark the working directory as safe for Git
        run: git config --global --add safe.directory $PWD

      - name: Install the project
        run: poetry install

      - name: Run pre-commit checks
        run: pre-commit run --all-files


  licenses:
    name: Licenses
    runs-on: ubuntu-latest
    container: fedorapython/fedora-python-tox:latest
    steps:
      - uses: actions/checkout@v5

      - name: Install dependencies
        run: |
          dnf install -y libpq-devel krb5-devel
          pip install poetry

      - name: Run the licenses check
        run: tox -e licenses


  docs:
    name: Documentation
    runs-on: ubuntu-latest
    container: fedorapython/fedora-python-tox:latest
    steps:
      - uses: actions/checkout@v5

      - name: Install dependencies
        run: |
          dnf install -y libpq-devel krb5-devel
          pip install poetry

      - name: Build the docs
        run: tox -e docs

      # - name: Save the docs
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: docs
      #     path: journal_to_fedora_messaging/docs/_build/html


  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    container: fedorapython/fedora-python-tox:latest
    steps:
      - uses: actions/checkout@v5

      - name: Install dependencies
        run: |
          dnf install -y libpq-devel krb5-devel
          pip install poetry

      - name: Mark the working directory as safe for Git
        run: git config --global --add safe.directory $PWD

      - name: Run the tests
        run: tox -e ${{ matrix.pyver }}

      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v1
      #   with:
      #     name: ${{ matrix.pyver }}
      #     flags: unittests
      #     env_vars: PYTHON
      #     fail_ci_if_error: true

    strategy:
      matrix:
        pyver:
          - py39
          - py310
          - py311
          - py312



  # https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
  build:
    name: Build distribution ðŸ“¦
    runs-on: ubuntu-latest
    needs:
      - checks
      - licenses
      - docs
      - unit-tests
    outputs:
      release-notes: ${{ steps.extract-changelog.outputs.markdown }}

    steps:

      - uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.x"

      - name: Install pypa/build
        run: python3 -m pip install build --user

      - name: Build a binary wheel and a source tarball
        run: python3 -m build

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Extract changelog section
        id: extract-changelog
        uses: sean0x42/markdown-extract@v2
        with:
          file: docs/release_notes.md
          pattern: 'Version\s+\[[[:word:].-]+\]\(.*\)'
          no-print-matched-heading: true
      - name: Show the changelog
        env:
          CHANGELOG: ${{ steps.extract-changelog.outputs.markdown }}
        run: echo "$CHANGELOG"


  publish-to-pypi:
    name: Publish to PyPI ðŸš€
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'rc')  # only on final tag pushes
    needs:
      - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/journal-to-fedora-messaging
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v6
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  rpms:
    name: Build RPMs ðŸ“¦
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'rc')  # only on final tag pushes
    needs:
      - build
    runs-on: ubuntu-latest
    container: fedora:latest
    steps:
      - uses: actions/checkout@v5
      - name: Install base dependencies
        run: sudo dnf -y install git rpm-build
      - name: Mark the working directory as safe for Git
        run: git config --global --add safe.directory $PWD
      - name: Download all the dists
        uses: actions/download-artifact@v6
        with:
          name: python-package-distributions
          path: .
      - name: Build RPMs
        # Just build the src.rpm because we can't get a package for the schemas
        run: |
          mkdir rpmbuild
          rpmbuild -D "_topdir $(pwd)/rpmbuild" -D "_sourcedir $(pwd)" -D "_srcrpmdir $(pwd)/RPMS" -bs $(pwd)/*.spec
      - name: Store the RPMs
        uses: actions/upload-artifact@v4
        with:
          name: rpms
          path: RPMS


  github-release:
    name: Create a GitHub Release ðŸ“¢
    needs:
      - publish-to-pypi
      - rpms
      # The "build" dep is redundant but needed to access the changelog
      - build
    runs-on: ubuntu-latest
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
      - name: Download the python package
        uses: actions/download-artifact@v6
        with:
          name: python-package-distributions
          path: dist/
      - name: Download the RPMs
        uses: actions/download-artifact@v6
        with:
          name: rpms
          path: rpms/

      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.1.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*
            rpms/*
          fail_on_unmatched_files: true
          # generate_release_notes: true
          body: ${{ needs.build.outputs.release-notes }}
